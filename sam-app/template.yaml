AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Adequate Backend

  Additional elements for Adequate Backend

# Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Runtime: python3.8
    MemorySize: 128

Parameters:
  BaseName:
    Type: String
    Description: App name; used as prefix for function names
    Default: adequate-sam
  Environment:
    Type: String
    Description: Environment to which resources will be deployed
    AllowedValues:
      - dev
      - local
      - stage
      - prod
      - master
    Default: local
  FeatureBranch:
    Type: String
    Description: Name of the feature branch if this is not a build from the master code branch
    Default: ''
  KmsKeyId:
    Type: String
    Description: ARN for KMS key used to encrypt meh.com API key
  MehApiKey:
    Type: String
    Description: Encrypted meh.com API key
  ApnsCategory:
    Type: String
    Description: Category for APNs notifications
    Default: MGDailyDealCategory
  GraphQlId:
    Type: String
    Description: AppSync API ID associated with this project
  GraphQlEndpoint:
    Type: String
    Description: AppSync Endpoint associated with this project
  AlarmEmailParam:
    Type: String
    Description: Email address to which function alarms will be sent (Optional)
    Default: ''

Conditions:
  UseApnsSandbox: !Not [!Equals [ !Ref Environment, master ]]
  SendAlarmNotification: !Not [!Equals [!Ref AlarmEmailParam, '']]

Resources:

  DealUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      # If you specify a `TopicName`, you can't perform updates that require replacement of this resource
      DisplayName: NewDealTopic

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # Deletion fails for buckets that have contents
    # Properties:
      # If you specify a `BucketName`, you can't perform updates that require replacement of this resource 

  DealCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Check for new or updated deals on meh.com and update AppSync API
      CodeUri: deal_check/
      Handler: app.lambda_handler
      FunctionName: !Sub '${BaseName}-dealCheck-${Environment}'
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref KmsKeyId
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DealUpdateTopic.TopicName
        - S3WritePolicy:
            BucketName: !Ref S3Bucket
        - Version: '2012-10-17'
          Statement:
            Effect: Allow
            Action:
                - appsync:Create*
                - appsync:StartSchemaCreation
                - appsync:GraphQL
                - appsync:Get*
                - appsync:List*
                - appsync:Update*
            Resource: !Sub 'arn:aws:appsync:${AWS::Region}:${AWS::AccountId}:apis/${GraphQlId}/*'
      Environment:
        Variables:
          MEH_API_KEY: !Ref MehApiKey
          API_ENDPOINT: !Ref GraphQlEndpoint
          TOPIC_ARN: !Ref DealUpdateTopic
          BUCKET_NAME: !Ref S3Bucket
      Events:
        Schedule1:
          Type: Schedule # https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Properties:
            Description: Schedule rule for deal_check Lambda 
            Schedule: cron(1/5 * * * ? *)

  DealNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: NewDealAPNs

  NotificationFunction:
    Type: AWS::Serverless::Function # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Send push notifications for new / updated deals via APNS
      CodeUri: push_notification/
      Handler: app.lambda_handler
      FunctionName: !Sub '${BaseName}-notification-${Environment}'
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DealNotificationTopic.TopicName
      Environment:
        Variables:
          TOPIC_ARN: !Ref DealNotificationTopic
          APNS_SERVER: !If [UseApnsSandbox, dev, prod]
          APNS_CATEGORY: !Ref ApnsCategory
      Events:
        SNSEventSource:
          Type: SNS # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#sns
          Properties:
            Topic: !Ref DealUpdateTopic

  ErrorAlarmTopic:
    Condition: SendAlarmNotification
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DealCheckError

  ErrorAlarmEmailSubscription:
    Condition: SendAlarmNotification
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ErrorAlarmTopic
      Protocol: email
      Endpoint: !Ref AlarmEmailParam

  DealCheckErrorAlarm:
    Condition: SendAlarmNotification
    Type: AWS::CloudWatch::Alarm
    Properties:
      # AlarmDescription: 
      AlarmActions:
        - !Ref ErrorAlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DealCheckFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'

Outputs:
  DealUpdateTopicOutput:
    Description: Lambda communication SNS Topic ARN
    Value: !Ref DealUpdateTopic
    
  DealNotificationTopicOutput:
    Description: Push notification SNS Topic ARN
    Value: !Ref DealNotificationTopic
  
  DealCheckFunctionOutput:
    Description: DealCheck Lambda Function ARN
    Value: !GetAtt DealCheckFunction.Arn

  NotificationFunctionOutput:
    Description: Notification Lambda Function ARN
    Value: !GetAtt NotificationFunction.Arn

  ErrorAlarmTopicOutput:
    Description: Lambda error alarm SNS Topic ARN
    Value: !Ref ErrorAlarmTopic
    Condition: SendAlarmNotification

  DealCheckErrorAlarmOutput:
    Description: Lambda error CloudWatch Alarm ARN
    Value: !GetAtt DealCheckErrorAlarm.Arn
    Condition: SendAlarmNotification

  S3BucketOutput:
    Description: S3 Bucket name
    Value: !Ref S3Bucket
